/***************************************************/
/* Data Analysis using SQL - Movie Rental Analysis */
/***************************************************/

/* Please create the Sakila DB in your IDE and import the related data before running the queries below */

/* Sales Analysis*/

-- Popular Movies Categories
-- 1. Identify Popular Movie Categories: Analyze the "film_category" and "category" tables to determine the most popular movie categories. 
--    Count the number of movies in each category and calculate the percentage of movies belonging to each category

-- a. popular movie categories

SELECT c.name AS m_category, COUNT(fc.film_id) AS movie_count
FROM category c
JOIN film_category fc 
using (category_id)
GROUP BY m_category
ORDER BY movie_count DESC;

-- b. Percentage of movies belonging to each category 

SELECT c.name AS m_category, COUNT(fc.film_id) AS movie_count, 
       COUNT(fc.film_id) * 100 / (SELECT COUNT(*) FROM film_category) AS percentage
FROM category c
JOIN film_category fc 
USING (category_id)
GROUP BY m_category
ORDER BY movie_count DESC;


-- Rental & Sales Data Analysis

-- a. Total revenue generated from rental transactions (from payment table)

SELECT SUM(amount) AS total_revenue
FROM payment;

-- b. average rental duration 
SELECT AVG(DATEDIFF(return_date, rental_date)) AS average_rental_duration
FROM rental;

-- c. average payment amount

SELECT AVG(amount) AS average_payment_amount
FROM payment;

-- d. analyse trends in rental frequency over time

SELECT DATE(rental_date) AS rental_date, COUNT(*) AS rental_count
FROM rental
GROUP BY DATE(rental_date);

-- e. trend in rental duration over time

SELECT DATE(rental_date) AS rental_date, AVG(DATEDIFF(return_date, rental_date)) AS average_rental_duration
FROM rental
GROUP BY DATE(rental_date);

-- f. sales trend over time

SELECT DATE(payment_date) AS payment_date, SUM(amount) AS daily_sales
FROM payment
GROUP BY DATE(payment_date)
ORDER BY DATE(payment_date);

-- average number of rentals per month
   
SELECT DATE_FORMAT(rental_date, '%Y-%m') AS rental_month, COUNT(*) AS rental_count
FROM rental
GROUP BY rental_month;



-- Focus 3: Determine Peak Rental Periods
-- Group rental transactions by date and time to identify peak rental periods. Determine the busiest days of the week or months when rentals are most frequent.

SELECT DATE(rental_date) AS rental_date, COUNT(*) AS rental_count
FROM rental
GROUP BY DATE(rental_date)
ORDER BY rental_count DESC;


-- 4. Evaluating movie genre performance based on rental and sales data
      -- Calculate the total revenue generated by each genre

SELECT c.name AS genre, SUM(p.amount) AS total_revenue
FROM category c
JOIN film_category fc using (category_id)
JOIN film f using (film_id)
JOIN inventory i using (film_id)
JOIN rental r using (inventory_id)
JOIN payment p using (rental_id)
GROUP BY genre
ORDER BY total_revenue DESC;

      -- calculate the avg rental duration for each category
      
SELECT c.name AS genre, AVG(DATEDIFF(r.return_date, r.rental_date)) AS average_rental_duration
FROM category c
JOIN film_category fc using (category_id)
JOIN film f USING (film_id)
JOIN inventory i USING (film_id)
JOIN rental r USING (inventory_id)
GROUP BY genre
ORDER BY average_rental_duration DESC;

     -- identify the most popular genres based on rental frequency
     
SELECT c.name AS genre, COUNT(*) AS rental_count
FROM category c
JOIN film_category fc USING (category_id)
JOIN film f USING (film_id)
JOIN inventory i USINg (film_id)
JOIN rental r USING (inventory_id)
GROUP BY genre
ORDER BY rental_count DESC;

-- 5 Customer Behaviour Analysis:

    -- Calculate the average number of rentals per customer

SELECT AVG(rental_count) AS average_rentals_per_customer
FROM (
    SELECT c.customer_id, COUNT(r.rental_id) AS rental_count
    FROM customer c
    LEFT JOIN rental r USING (customer_id)
    GROUP BY c.customer_id
) AS subquery;

	-- calculate average payment amount per customer
    
SELECT AVG(p.amount) AS average_payment_amount_per_customer
FROM customer c
JOIN payment p USING (customer_id);

   -- distribution of rental frequency
   
SELECT rental_count, COUNT(*) AS customer_count
FROM (
    SELECT c.customer_id, COUNT(r.rental_id) AS rental_count
    FROM customer AS c
    LEFT JOIN rental AS r ON c.customer_id = r.customer_id
    GROUP BY c.customer_id
) AS subquery
GROUP BY rental_count
ORDER BY rental_count;


-- what are the top 5 highest-grossing movies in terms of revenue

 SELECT film_id, title, revenue_rank
FROM (
    SELECT f.film_id, f.title, SUM(p.amount) AS revenue,
    ROW_NUMBER() OVER (ORDER BY SUM(p.amount) DESC) AS revenue_rank
    FROM film f
    JOIN inventory i USING (film_id)
    JOIN rental r USING (inventory_id)
    JOIN payment p USING (rental_id)
    GROUP BY f.film_id, f.title
) AS subquery
WHERE revenue_rank <= 5;

   -- who are the top 3 customers with the highest total payment amount
   
WITH total_payments AS (
    SELECT p.customer_id, c.first_name, c.last_name, SUM(p.amount) AS total_payment_amount
    FROM payment p
    JOIN customer c USING (customer_id)
    GROUP BY p.customer_id, c.first_name, c.last_name
)
SELECT customer_id, first_name, last_name, total_payment_amount
FROM total_payments
ORDER BY total_payment_amount DESC
LIMIT 3;


    -- movies with the highest number of rentals and it's rank among all movies
    
WITH rental_counts AS (
    SELECT f.film_id, f.title, COUNT(*) AS rental_count,
    RANK() OVER (ORDER BY COUNT(*) DESC) AS rental_rank
    FROM film f
    JOIN inventory i USING (film_id)
    JOIN rental r USING (inventory_id)
    GROUP BY f.film_id, f.title
)
SELECT film_id, title, rental_count, rental_rank
FROM rental_counts
WHERE rental_rank = 1;


-- /*How much revenue has one single store made over PG13 and R rated films*/

SELECT s.store_id, f.rating, SUM(p.amount) AS total_revenue
FROM store s 
JOIN inventory i USING (store_id)
JOIN rental r USING (inventory_id)
JOIN payment p USING (rental_id)
JOIN film f USING (film_id)
WHERE f.rating IN ("PG-13", "R")
GROUP BY s.store_id, f.rating;


/* For each movie, when was the first time and last time it was rented out? */

SELECT f.title AS film_title, MIN(r.rental_date) AS First_Rented_Date, MAX(r.rental_date) AS Last_Rented_Date
FROM film f
JOIN inventory i USING (film_id)
JOIN rental r USING (inventory_id)
GROUP BY film_title;

